// <auto-generated />
using System;
using Business.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Business.Migrations
{
    [DbContext(typeof(PaymentDbContext))]
    [Migration("20190913113515_migr10")]
    partial class migr10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Business.Models.Carts", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Business.Models.City", b =>
                {
                    b.Property<Guid>("ID");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("NameAr")
                        .IsRequired();

                    b.Property<string>("NameEn")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Business.Models.ContactSMS", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("Message");

                    b.Property<string>("Name");

                    b.Property<bool>("Status");

                    b.Property<string>("Subject");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("ContactSMS");
                });

            modelBuilder.Entity("Business.Models.Country", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CitiesID");

                    b.Property<string>("NameAr")
                        .IsRequired();

                    b.Property<string>("NameEn")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CitiesID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Business.Models.Invoice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("PaymentID");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Business.Models.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankName")
                        .IsRequired();

                    b.Property<string>("IBAN")
                        .IsRequired();

                    b.Property<Guid>("PaymentDetailsID");

                    b.Property<int>("PaymentStatus");

                    b.Property<Guid>("ProductID");

                    b.Property<string>("RIB")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Business.Models.PaymentDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountExpiryDate")
                        .IsRequired();

                    b.Property<string>("AccountNumber")
                        .IsRequired();

                    b.Property<string>("AccountSecurityNumber")
                        .IsRequired();

                    b.Property<string>("BankName")
                        .IsRequired();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<int?>("PaymentID");

                    b.HasKey("ID");

                    b.HasIndex("PaymentID");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("Business.Models.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal?>("Discount")
                        .IsRequired();

                    b.Property<DateTime?>("EndDate")
                        .IsRequired();

                    b.Property<DateTime?>("ExpiryDate")
                        .IsRequired();

                    b.Property<decimal?>("FromPrice")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameAr")
                        .IsRequired();

                    b.Property<string>("NameEn")
                        .IsRequired();

                    b.Property<int?>("PaymentID");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired();

                    b.Property<int>("SuggestedCount");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Business.Models.ProductCategorie", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FontAwesome");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameAr")
                        .IsRequired();

                    b.Property<string>("NameEn");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid>("UserID");

                    b.Property<Guid>("prodTypesID");

                    b.HasKey("ID");

                    b.ToTable("ProductCategorie");
                });

            modelBuilder.Entity("Business.Models.ProductType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("NameAr")
                        .IsRequired();

                    b.Property<string>("NameEn");

                    b.Property<Guid?>("ProductCategorieID");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ProductCategorieID");

                    b.ToTable("ProductType");
                });

            modelBuilder.Entity("Business.Models.Country", b =>
                {
                    b.HasOne("Business.Models.City", "Cities")
                        .WithMany()
                        .HasForeignKey("CitiesID");
                });

            modelBuilder.Entity("Business.Models.Invoice", b =>
                {
                    b.HasOne("Business.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID");
                });

            modelBuilder.Entity("Business.Models.PaymentDetails", b =>
                {
                    b.HasOne("Business.Models.Payment")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("PaymentID");
                });

            modelBuilder.Entity("Business.Models.Product", b =>
                {
                    b.HasOne("Business.Models.Payment")
                        .WithMany("Produtcs")
                        .HasForeignKey("PaymentID");
                });

            modelBuilder.Entity("Business.Models.ProductType", b =>
                {
                    b.HasOne("Business.Models.ProductCategorie")
                        .WithMany("Producttypes")
                        .HasForeignKey("ProductCategorieID");
                });
#pragma warning restore 612, 618
        }
    }
}
